/**
 * types declaration file for module `ascii-table`.
 * @module
 * @remarks
 * - generated by tsc and fixed manually to declare as a module.
 */

/* eslint-disable @typescript-eslint/no-explicit-any */

declare module "ascii-table" {
    class AsciiTable {
        /**
         * AsciiTable constructor
         *
         * @param {String|Object} title or JSON table
         * @param {Object} table options
         *  - `prefix` - string prefix added to each line on render
         * @constructor
         * @api public
         */
        constructor(name: any, options: any);
        options: any;
        /* !
        * Instance methods
        */
        /**
         * Reset the table state back to defaults
         *
         * @param {String|Object} title or JSON table
         * @api public
         */
        reset: (name: any)=> this;
        clear(name: any): this;
        __name: any;
        __nameAlign: any;
        __rows: any[];
        __maxCells: any;
        __aligns: any[];
        __colMaxes: any[];
        __spacing: number;
        __heading: any;
        __headingAlign: any;
        /**
         * Set the table border
         *
         * @param {String} horizontal edges (optional, default `|`)
         * @param {String} vertical edges (optional, default `-`)
         * @param {String} top corners (optional, default `.`)
         * @param {String} bottom corners (optional, default `'`)
         * @api public
         */
        setBorder(edge: any, fill: any, top: string, bottom: string, ...args: any[]): this;
        __border: boolean;
        __edge: any;
        __fill: any;
        __top: string;
        __bottom: string;
        /**
         * Remove all table borders
         *
         * @api public
         */
        removeBorder(): this;
        /**
         * Set the column alignment at a given index
         *
         * @param {Number} column index
         * @param {Number} alignment direction
         * @api public
         */
        setAlign(idx: any, dir: any): this;
        /**
         * Set the title of the table
         *
         * @param {String} title
         * @api public
         */
        setTitle(name: any): this;
        /**
         * Get the title of the table
         *
         * @return {String} title
         * @api public
         */
        getTitle(): string;
        /**
         * Set table title alignment
         *
         * @param {Number} direction
         * @api public
         */
        setTitleAlign(dir: any): this;
        /**
         * AsciiTable sorting shortcut to sort rows
         *
         * @param {Function} sorting method
         * @api public
         */
        sort(method: any): this;
        /**
         * Sort rows based on sort method for given column
         *
         * @param {Number} column index
         * @param {Function} sorting method
         * @api public
         */
        sortColumn(idx: any, method: any): this;
        /**
         * Set table heading for columns
         *
         * @api public
         */
        setHeading(row: any, ...args: any[]): this;
        /**
         * Get table heading for columns
         *
         * @return {Array} copy of headings
         * @api public
         */
        getHeading(): any[];
        /**
         * Set heading alignment
         *
         * @param {Number} direction
         * @api public
         */
        setHeadingAlign(dir: any): this;
        /**
         * Add a row of information to the table
         *
         * @param {...|Array} argument values in order of columns
         * @api public
         */
        addRow(row: any, ...args: any[]): this;
        /**
         * Get a copy of all rows of the table
         *
         * @return {Array} copy of rows
         * @api public
         */
        getRows(): any[];
        /**
         * Add rows in the format of a row matrix
         *
         * @param {Array} row matrix
         * @api public
         */
        addRowMatrix(rows: any): this;
        /**
         * Add rows from the given data array, processed by the callback function rowCallback.
         *
         * @param {Array} data
         * @param (Function) rowCallback
         * @param (Boolean) asMatrix - controls if the row created by rowCallback should be assigned as row matrix
         * @api public
         */
        addData(data: any[], rowCallback: any, asMatrix: any): this;
        /**
     * Reset the current row state
     *
     * @api public
     */
        clearRows(): this;
        /**
         * Apply an even spaced column justification
         *
         * @param {Boolean} on / off
         * @api public
         */
        setJustify(val: any, ...args: any[]): this;
        __justify: boolean;
        /**
         * Convert the current instance to a JSON structure
         *
         * @return {Object} json representation
         * @api public
         */
        toJSON(): any;
        /**
         * Populate the table from a JSON object
         *
         * @param {Object} json representation
         * @api public
         */
        parse: (obj: any)=> this;
        fromJSON(obj: any): this;
        /**
         * Render the table with the current information
         *
         * @return {String} formatted table
         * @api public
         */
        render: ()=> string;
        valueOf: ()=> string;
        toString(): string;
        /**
         * Create a line seperator
         *
         * @param {Number} string size
         * @param {String} side values (default '|')
         * @api private
         */
        _seperator(len: any, sep: any): string;
        /**
         * Create a row seperator
         *
         * @return {String} seperator
         * @api private
         */
        _rowSeperator(): string;
        /**
         * Render the table title in a centered box
         *
         * @param {Number} string size
         * @return {String} formatted title
         * @api private
         */
        _renderTitle(len: any): string;
        /**
         * Render an invdividual row
         *
         * @param {Array} row
         * @param {String} column seperator
         * @param {Number} total row alignment (optional, default `auto`)
         * @return {String} formatted row
         * @api private
         */
        _renderRow(row: any[], str: any, align: any): string;
    }

    export default AsciiTable;
}